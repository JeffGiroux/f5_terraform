#!/bin/bash

# Setup console and startup-script logging
LOG_FILE=/var/log/cloud/startup-script.log
[[ -f $LOG_FILE ]] || /usr/bin/touch $LOG_FILE
npipe=/tmp/$$.tmp
/usr/bin/trap "rm -f $npipe" EXIT
/usr/bin/mknod $npipe p
/usr/bin/tee <$npipe -a $LOG_FILE /dev/ttyS0 &
exec 1>&-
exec 1>$npipe
exec 2>&1

# skip startup script if already complete
if [[ -f /config/startup_finished ]]; then
  echo "Onboarding complete, skip startup script"
  exit
fi

mkdir -p  /var/log/cloud /config/cloud /var/config/rest/downloads /var/lib/cloud/icontrollx_installs

# Optional optimizations required as early as possible in boot sequence before MCDP starts up.
# JeffGiroux - If placed into runtime init pre-onboard,
#              you receive error "Error getting project
#              ID Unable to detect a Project Id in the
#              current environment"
echo "Provisioning extra restjavad memory"
/usr/bin/setdb provision.extramb 1024
/usr/bin/setdb restjavad.useextramb true

### write_files:
# Download or Render BIG-IP Runtime Init Config


# Create runtime configuration on first boot
if [[ ! -f /config/nicswap_finished ]]; then
cat << 'EOF' > /config/cloud/runtime-init-conf.yaml
---
runtime_parameters:
  - name: USER_NAME
    type: static
    value: ${f5_username}
  - name: SSH_KEYS
    type: static
    value: ${ssh_keypair}
EOF

if ${gcp_secret_manager_authentication}; then
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: secret
    secretProvider:
      environment: gcp
      type: SecretsManager
      version: latest
      secretId: ${gcp_secret_name}
EOF
else
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: static
    value: ${f5_password}
EOF
fi

# Add remaining runtime_parameters
cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: GATEWAY_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: first
  - name: NETWORK_BASE_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: base
  - name: NETWORK_MASK_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: bitmask
  - name: MTU_EXTERNAL
    type: url
    value: http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/0/?recursive=true
    query: mtu
    returnType: number
    headers:
      - name: Metadata-Flavor
        value: Google
  - name: SELF_IP_EXTERNAL
    type: metadata
    metadataProvider:
      environment: gcp
      type: network
      field: ip
      index: 0
      ipcalc: address
  - name: DNS_SERVER
    type: static
    value: ${dns_server}
  - name: DNS_SUFFIX
    type: static
    value: ${dns_suffix}
  - name: NTP_SERVER
    type: static
    value: ${ntp_server}
  - name: TIMEZONE
    type: static
    value: ${timezone}
  - name: HOST_NAME
    type: url
    value: http://169.254.169.254/computeMetadata/v1/instance/name
    headers:
      - name: Metadata-Flavor
        value: Google
  - name: PUBLIC_VIP
    type: static
    value: ${public_vip}
pre_onboard_enabled:
  - name: provision_rest
    type: inline
    commands:
      - /usr/bin/setdb provision.extramb 1024
      - /usr/bin/setdb restjavad.useextramb true
      - /usr/bin/setdb setup.run false
extension_packages:
  install_operations:
    - extensionType: do
      extensionVersion: ${DO_VER}
      extensionUrl: ${DO_URL}
    - extensionType: as3
      extensionVersion: ${AS3_VER}
      extensionUrl: ${AS3_URL}
extension_services:
  service_operations:
    - extensionType: do
      type: inline
      value:
        schemaVersion: 1.0.0
        class: Device
        async: true
        label: Onboard BIG-IP with Autoscaling
        Common:
          class: Tenant
          dbVars:
            class: DbVariables
            restjavad.useextramb: true
            provision.extramb: 1024
            config.allow.rfc3927: enable
            ui.advisory.enabled: true
            ui.advisory.color: blue
            ui.advisory.text: '{{{ HOST_NAME }}}.${dns_suffix}'
          mySystem:
            autoPhonehome: true
            class: System
            hostname: '{{{ HOST_NAME }}}.${dns_suffix}'
          '{{{ USER_NAME }}}':
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ ADMIN_PASS }}}'
            shell: bash
            userType: regular
            keys:
              - '{{{ SSH_KEYS }}}'
          myDns:
            class: DNS
            nameServers:
              - '{{{ DNS_SERVER }}}'
            search:
              - '{{{ DNS_SUFFIX }}}'
              - f5.com
          myNtp:
            class: NTP
            servers:
              - '{{{ NTP_SERVER }}}'
              - 1.pool.ntp.org
              - 2.pool.ntp.org
            timezone: '{{{ TIMEZONE }}}'
          myProvisioning:
            class: Provision
            ltm: nominal
    - extensionType: as3
      type: inline
      value:
        class: AS3
        action: deploy
        persist: true
        declaration:
          class: ADC
          schemaVersion: 3.0.0
          label: Sample 1
          remark: A HTTP sample application
          Common:
            class: Tenant
            Shared:
              class: Application
              template: shared
              mig_healthCheck_rule:
                remark: Respond to MIG health check
                class: iRule
                iRule: when CLIENT_ACCEPTED { TCP::close }
              mig_healthCheck_vs:
                class: Service_TCP
                remark: MIG Health Check VS
                virtualPort: 40000
                virtualAddresses:
                  - '{{{ SELF_IP_EXTERNAL }}}'
                iRules:
                  - mig_healthCheck_rule
          Tenant_1:
            class: Tenant
            Shared:
              class: Application
              template: shared
              GLB_serviceAddress:
                class: Service_Address
                virtualAddress: '{{{ PUBLIC_VIP }}}'
            A1:
              class: Application
              template: http
              serviceMain:
                class: Service_HTTP
                virtualAddresses:
                  - use: /Tenant_1/Shared/GLB_serviceAddress
                pool: web_pool
              web_pool:
                class: Pool
                monitors:
                  - tcp
                members:
                  - servicePort: 80
                    addressDiscovery: fqdn
                    autoPopulate: true
                    hostname: httpbin.org
            GLB_Probe_Ext:
              class: Application
              fr-probe-external:
                class: Service_HTTP
                remark: Health check listener for external GLB
                virtualPort: 40000
                virtualAddresses:
                  - use: /Tenant_1/Shared/GLB_serviceAddress
                iRules:
                  - monitor_respond_200
              monitor_respond_200:
                class: iRule
                iRule: when HTTP_REQUEST { HTTP::respond 200 content OK Content-Type text/plain }
post_onboard_enabled:
  - name: misc
    type: inline
    commands:
    - tmsh save sys config
EOF
fi

# Create nic_swap script when multi nic on first boot
COMPUTE_BASE_URL="http://metadata.google.internal/computeMetadata/v1"

if [[ ${NIC_COUNT} && ! -f /config/nicswap_finished ]]; then
   cat << 'EOF' >> /config/cloud/nic_swap.sh
   #!/bin/bash
   source /usr/lib/bigstart/bigip-ready-functions
   wait_bigip_ready
   echo "before nic swapping"
   tmsh list sys db provision.1nicautoconfig
   tmsh list sys db provision.managementeth
   echo "after nic swapping"
   bigstart stop tmm
   tmsh modify sys db provision.managementeth value eth1
   tmsh modify sys db provision.1nicautoconfig value disable
   bigstart start tmm
   wait_bigip_ready
   echo "---Mgmt interface setting---"
   tmsh list sys db provision.managementeth
   tmsh list sys db provision.1nicautoconfig
   sed -i "s/iface0=eth0/iface0=eth1/g" /etc/ts/common/image.cfg
   echo "Done changing interface"
   echo "Set TMM networks"
   MGMTADDRESS=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/ip)
   MGMTMASK=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/subnetmask)
   MGMTGATEWAY=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/gateway)
   MGMTMTU=$(curl -s -f --retry 10 -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/1/mtu)
   MGMTNETWORK=$(/bin/ipcalc -n $MGMTADDRESS $MGMTMASK | cut -d= -f2)
   echo $MGMTADDRESS
   echo $MGMTMASK
   echo $MGMTGATEWAY
   echo $MGMTMTU
   echo $MGMTNETWORK
   tmsh modify sys global-settings gui-setup disabled
   tmsh modify sys global-settings mgmt-dhcp disabled
   tmsh delete sys management-route all
   tmsh delete sys management-ip all
   tmsh create sys management-ip $${MGMTADDRESS}/32
   tmsh create sys management-route mgmt_gw network $${MGMTGATEWAY}/32 type interface mtu $${MGMTMTU}
   tmsh create sys management-route mgmt_net network $${MGMTNETWORK}/$${MGMTMASK} gateway $${MGMTGATEWAY} mtu $${MGMTMTU}
   tmsh create sys management-route default gateway $${MGMTGATEWAY} mtu $${MGMTMTU}
   tmsh modify sys global-settings remote-host add { metadata.google.internal { hostname metadata.google.internal addr 169.254.169.254 } }
   tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { ntp-servers }
   # JeffGiroux - Use GCP metadata server for DNS during onboarding
   tmsh modify sys dns name-servers add { 169.254.169.254 }
   tmsh save /sys config
   /usr/bin/touch /config/nicswap_finished
   reboot
EOF
fi

# Create run_runtime_init.sh script on first boot
if [[ ! -f /config/nicswap_finished ]]; then
  cat << 'EOF' >> /config/cloud/run_runtime_init.sh
  #!/bin/bash
  source /usr/lib/bigstart/bigip-ready-functions
  wait_bigip_ready
  for i in {1..30}; do
    curl -fv --retry 1 --connect-timeout 5 -L ${INIT_URL} -o "/var/config/rest/downloads/f5-bigip-runtime-init.gz.run" && break || sleep 10
  done
  bash /var/config/rest/downloads/f5-bigip-runtime-init.gz.run -- '--cloud gcp' 2>&1
  /usr/local/bin/f5-bigip-runtime-init --config-file /config/cloud/runtime-init-conf.yaml 2>&1
  /usr/bin/touch /config/startup_finished
EOF
fi

# Run scripts based on number of nics
if ${NIC_COUNT}; then
  if [[ -f /config/nicswap_finished ]]; then
    echo "Running run_runtime_init.sh"
    chmod +x /config/cloud/run_runtime_init.sh
    nohup /config/cloud/run_runtime_init.sh &
  else
    chmod +x /config/cloud/nic_swap.sh
    nohup /config/cloud/nic_swap.sh &
  fi
else
    echo "Running run_runtime_init.sh"
    chmod +x /config/cloud/run_runtime_init.sh
    nohup /config/cloud/run_runtime_init.sh &
fi
