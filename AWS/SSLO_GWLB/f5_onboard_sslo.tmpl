#!/bin/bash

# Send output to log file and serial console
mkdir -p  /var/log/cloud /config/cloud /var/config/rest/downloads
LOG_FILE=/var/log/cloud/startup-script.log
[[ ! -f $LOG_FILE ]] && touch $LOG_FILE || { echo "Run Only Once. Exiting"; exit; }
npipe=/tmp/$$.tmp
trap "rm -f $npipe" EXIT
mknod $npipe p
tee <$npipe -a $LOG_FILE /dev/ttyS0 &
exec 1>&-
exec 1>$npipe
exec 2>&1
echo "$(date +"%Y-%m-%dT%H:%M:%S.%3NZ") : Startup Script Start"


# @JeffGiroux TODO
#   Note: restjavad memory set to 2544 for sslo
#         and to accodomdate for current memory
#         issues - https://cdn.f5.com/product/bugtracker/ID1025261.html
#

### write_files:
# Download or Render BIG-IP Runtime Init Config

cat << 'EOF' > /config/cloud/runtime-init-conf.yaml
---
runtime_parameters:
  - name: USER_NAME
    type: static
    value: ${f5_username}
  - name: SSH_KEYS
    type: static
    value: ${ssh_keypair}
EOF

if ${aws_secretmanager_auth}; then
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: secret
    secretProvider:
      environment: aws
      type: SecretsManager
      version: AWSCURRENT
      secretId: ${f5_password}
EOF
else
   cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: ADMIN_PASS
    type: static
    value: ${f5_password}
EOF
fi

# Add remaining runtime_parameters
cat << 'EOF' >> /config/cloud/runtime-init-conf.yaml
  - name: GATEWAY_EXTERNAL
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: local-ipv4s
      index: 1
      ipcalc: first
  - name: GATEWAY_INTERNAL
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: local-ipv4s
      index: 6
      ipcalc: first
  - name: SELF_IP_EXTERNAL
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: local-ipv4s
      index: 1
      ipcalc: address
  - name: SELF_IP_INTERNAL
    type: metadata
    metadataProvider:
      environment: aws
      type: network
      field: local-ipv4s
      index: 6
      ipcalc: address
  - name: HOST_NAME
    type: metadata
    metadataProvider:
      environment: aws
      type: compute
      field: hostname
  - name: REGION
    type: url
    value: http://169.254.169.254/latest/dynamic/instance-identity/document
    query: region
pre_onboard_enabled:
  - name: provision_rest
    type: inline
    commands:
      - /usr/bin/setdb provision.extramb 2544
      - /usr/bin/setdb provision.tomcat.extramb 1024
      - /usr/bin/setdb restjavad.useextramb true
      - /usr/bin/setdb httpd.matchclient false
      - /usr/bin/setdb setup.run false
extension_packages:
  install_operations:
    - extensionType: do
      extensionVersion: ${DO_VER}
      extensionUrl: ${DO_URL}
    - extensionType: as3
      extensionVersion: ${AS3_VER}
      extensionUrl: ${AS3_URL}
    - extensionType: ts
      extensionVersion: ${TS_VER}
      extensionUrl: ${TS_URL}
extension_services:
  service_operations:
    - extensionType: do
      type: inline
      value:
        schemaVersion: 1.0.0
        class: Device
        async: true
        label: Onboard BIG-IP SSLO Standalone
        Common:
          class: Tenant
          myLicense:
            class: License
            licenseType: regKey
            regKey: ${license_key}
          dbVars:
            class: DbVariables
            restjavad.useextramb: true
            provision.extramb: 2544
            provision.tomcat.extramb: 1024
            ui.advisory.enabled: true
            ui.advisory.color: blue
            ui.advisory.text: SSLO BIG-IP Standalone
          mySystem:
            class: System
            autoPhonehome: false
            hostname: '{{{ HOST_NAME }}}'
          '{{{ USER_NAME }}}':
            class: User
            partitionAccess:
              all-partitions:
                role: admin
            password: '{{{ ADMIN_PASS }}}'
            shell: bash
            userType: regular
            keys:
              - '{{{ SSH_KEYS }}}'
          myDns:
            class: DNS
            nameServers:
              - 169.254.169.253
          myNtp:
            class: NTP
            servers:
              - 169.254.169.253
            timezone: UTC
          myProvisioning:
            class: Provision
            ltm: nominal
            apm: nominal
            sslo: nominal
            avr: nominal
          external:
            class: VLAN
            tag: 4094
            mtu: 1500
            interfaces:
              - name: '1.1'
                tagged: false
          external-localself:
            class: SelfIp
            address: '{{{ SELF_IP_EXTERNAL }}}/24'
            vlan: external
            allowService: default
            trafficGroup: traffic-group-local-only
          internal:
            class: VLAN
            tag: 4093
            mtu: 1500
            interfaces:
              - name: '1.6'
                tagged: false
          internal-localself:
            class: SelfIp
            address: '{{{ SELF_IP_INTERNAL }}}/24'
            vlan: internal
            allowService: default
            trafficGroup: traffic-group-local-only
          dmz1:
            class: VLAN
            tag: 4091
            mtu: 1500
            interfaces:
              - name: '1.2'
                tagged: false
          dmz2:
            class: VLAN
            tag: 4092
            mtu: 1500
            interfaces:
              - name: '1.3'
                tagged: false
          dmz3:
            class: VLAN
            tag: 4050
            mtu: 1500
            interfaces:
              - name: '1.4'
                tagged: false
          dmz4:
            class: VLAN
            tag: 4051
            mtu: 1500
            interfaces:
              - name: '1.5'
                tagged: false
          app-route:
            class: Route
            gw: '{{{ GATEWAY_INTERNAL }}}'
            network: ${app_route_dest}
            mtu: 1500
EOF

# Download BIG-IP Runtime Init
for i in {1..30}; do
    curl -fv --retry 1 --connect-timeout 5 -L ${INIT_URL} -o "/var/config/rest/downloads/f5-bigip-runtime.gz.run" && break || sleep 10
done

# Remove comment to do silly debugging on BIG-IP Runtime init
# export F5_BIGIP_RUNTIME_INIT_LOG_LEVEL=silly
# export F5_BIGIP_RUNTIME_EXTENSION_INSTALL_DELAY_IN_MS=60000

# Install BIG-IP Runtime Init
bash /var/config/rest/downloads/f5-bigip-runtime.gz.run -- '--cloud aws'

# Run BIG-IP Runtime Init and Process YAML
f5-bigip-runtime-init --config-file /config/cloud/runtime-init-conf.yaml

# Activate the built-in SSL Orchestrator package - filename is dependent on BIG-IP version that you are deploying
#   Note: Required for Ansible to be able to hit SSLO API endpoint
#         Otherwise, a user can manually click SSLO config in UI
#         and SSLO package will install automatically upon first launch.
restcurl -X POST /shared/iapp/stage-package-install -d '{"packagePath":"/usr/share/packages/f5-iappslx-ssl-orchestrator/${sslo_pkg_name}"}'
sleep 5
restcurl -X POST /shared/iapp/package-management-tasks -d '{"operation":"INSTALL","packageFilePath":"/var/config/rest/downloads/${sslo_pkg_name}"}'

echo "$(date +"%Y-%m-%dT%H:%M:%S.%3NZ") : Startup Script Finish"
